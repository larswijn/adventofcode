from collections import defaultdict

puzzle_input = '644,38 -> 644,265\n941,468 -> 941,89\n807,552 -> 618,363\n896,510 -> 896,744\n227,909 -> 227,745\n24,66 -> 946,988\n563,529 -> 563,270\n894,707 -> 359,172\n146,253 -> 146,569\n544,683 -> 140,683\n755,612 -> 755,463\n394,320 -> 891,320\n68,616 -> 68,628\n801,770 -> 801,942\n650,290 -> 580,360\n376,18 -> 181,213\n285,391 -> 805,911\n57,153 -> 501,153\n686,301 -> 686,316\n81,971 -> 683,369\n75,456 -> 75,355\n769,59 -> 769,81\n49,958 -> 49,718\n492,754 -> 492,256\n606,133 -> 391,133\n134,683 -> 134,656\n195,463 -> 658,926\n982,498 -> 982,927\n841,122 -> 889,74\n968,891 -> 968,189\n104,941 -> 104,868\n801,450 -> 272,979\n212,749 -> 212,366\n880,928 -> 880,757\n503,483 -> 283,263\n792,924 -> 792,540\n58,87 -> 905,934\n275,661 -> 36,422\n475,654 -> 466,645\n34,946 -> 969,11\n725,664 -> 725,150\n837,680 -> 837,952\n109,987 -> 644,452\n860,984 -> 860,691\n672,800 -> 107,235\n216,888 -> 301,888\n399,676 -> 718,357\n957,544 -> 784,544\n677,743 -> 633,743\n491,866 -> 77,452\n967,949 -> 45,27\n659,699 -> 659,27\n987,116 -> 696,116\n465,847 -> 309,847\n353,19 -> 353,627\n265,713 -> 592,386\n541,765 -> 461,765\n21,409 -> 895,409\n950,149 -> 766,149\n856,889 -> 895,889\n335,962 -> 485,812\n425,774 -> 400,749\n71,932 -> 989,14\n484,974 -> 44,974\n86,797 -> 86,470\n876,962 -> 876,384\n45,631 -> 169,507\n161,789 -> 523,427\n791,640 -> 791,581\n415,170 -> 835,590\n299,275 -> 988,964\n105,233 -> 231,359\n202,226 -> 202,958\n814,717 -> 618,521\n185,442 -> 559,68\n26,149 -> 665,149\n673,369 -> 247,795\n171,963 -> 171,46\n689,801 -> 94,206\n619,243 -> 619,637\n426,245 -> 660,11\n47,503 -> 47,179\n341,363 -> 487,217\n371,774 -> 371,871\n781,794 -> 781,180\n391,632 -> 92,632\n517,150 -> 517,715\n903,10 -> 18,895\n34,500 -> 426,500\n82,955 -> 886,151\n142,297 -> 142,527\n60,965 -> 36,965\n250,807 -> 372,685\n227,393 -> 610,776\n269,893 -> 269,556\n969,223 -> 611,223\n255,92 -> 194,92\n220,233 -> 958,233\n144,209 -> 144,979\n48,413 -> 48,195\n209,151 -> 648,590\n867,648 -> 871,644\n499,555 -> 807,555\n571,729 -> 865,435\n683,151 -> 485,151\n803,26 -> 803,691\n533,921 -> 300,688\n625,695 -> 483,553\n719,370 -> 139,950\n981,17 -> 16,982\n367,617 -> 367,636\n249,644 -> 835,644\n260,825 -> 260,519\n275,144 -> 275,315\n767,314 -> 962,119\n76,625 -> 76,166\n403,680 -> 313,680\n977,21 -> 16,982\n578,753 -> 271,753\n212,358 -> 477,623\n596,220 -> 868,220\n67,797 -> 935,797\n181,107 -> 181,379\n741,332 -> 419,10\n732,827 -> 732,989\n835,111 -> 436,510\n480,328 -> 480,682\n327,673 -> 327,70\n911,547 -> 833,625\n944,509 -> 874,579\n169,340 -> 731,902\n156,842 -> 825,173\n976,40 -> 51,965\n199,416 -> 916,416\n51,970 -> 792,229\n14,577 -> 501,577\n246,464 -> 246,289\n641,464 -> 100,464\n984,11 -> 43,952\n548,36 -> 156,428\n519,799 -> 519,43\n332,364 -> 332,774\n85,123 -> 85,753\n778,12 -> 40,750\n507,56 -> 507,840\n973,632 -> 670,632\n895,928 -> 37,70\n661,784 -> 661,718\n114,25 -> 938,849\n428,752 -> 428,543\n357,270 -> 957,870\n27,70 -> 899,942\n85,780 -> 747,780\n717,565 -> 951,565\n191,748 -> 651,748\n679,301 -> 679,417\n150,266 -> 150,184\n774,964 -> 64,254\n34,248 -> 34,279\n782,610 -> 802,610\n109,146 -> 822,859\n825,848 -> 825,666\n251,718 -> 615,718\n912,722 -> 289,722\n729,579 -> 729,889\n214,756 -> 214,716\n58,497 -> 58,927\n62,55 -> 742,55\n110,429 -> 110,154\n55,794 -> 638,794\n182,96 -> 676,96\n632,334 -> 202,764\n36,541 -> 36,397\n191,819 -> 191,277\n971,491 -> 839,491\n849,561 -> 538,250\n176,523 -> 10,689\n162,638 -> 717,638\n132,843 -> 646,329\n873,67 -> 873,389\n167,631 -> 167,473\n49,337 -> 465,337\n550,429 -> 438,429\n305,720 -> 476,720\n547,636 -> 547,902\n21,627 -> 49,627\n286,70 -> 989,70\n87,930 -> 896,121\n659,916 -> 200,916\n234,589 -> 234,308\n530,962 -> 90,962\n366,478 -> 676,788\n284,520 -> 284,546\n580,74 -> 146,508\n561,977 -> 561,237\n85,150 -> 804,869\n740,850 -> 159,269\n458,705 -> 458,639\n969,563 -> 381,563\n139,439 -> 139,263\n135,971 -> 908,198\n440,632 -> 102,632\n446,549 -> 446,734\n24,49 -> 212,237\n692,882 -> 527,882\n156,895 -> 156,239\n359,246 -> 359,603\n12,349 -> 604,941\n375,161 -> 732,161\n674,287 -> 322,287\n902,957 -> 328,383\n352,185 -> 352,766\n222,205 -> 222,419\n769,815 -> 769,739\n83,147 -> 880,147\n136,148 -> 136,279\n807,241 -> 439,241\n464,240 -> 478,254\n37,839 -> 646,839\n351,316 -> 639,604\n449,492 -> 449,125\n69,892 -> 933,28\n565,161 -> 598,161\n147,802 -> 905,44\n809,861 -> 38,90\n34,80 -> 34,538\n896,405 -> 582,405\n474,201 -> 893,201\n289,64 -> 975,750\n378,785 -> 375,782\n709,472 -> 357,472\n17,14 -> 987,984\n625,46 -> 647,46\n20,84 -> 914,978\n364,811 -> 397,811\n395,726 -> 628,726\n831,89 -> 593,89\n370,562 -> 827,562\n278,371 -> 609,40\n904,529 -> 391,16\n232,829 -> 232,63\n927,121 -> 194,854\n547,280 -> 547,895\n292,904 -> 292,897\n99,525 -> 99,868\n371,44 -> 643,44\n942,74 -> 986,118\n708,179 -> 110,179\n485,637 -> 713,637\n477,512 -> 102,137\n636,657 -> 727,657\n686,564 -> 256,564\n636,169 -> 377,169\n627,943 -> 627,703\n987,795 -> 987,758\n364,827 -> 642,827\n613,694 -> 864,945\n910,521 -> 777,654\n119,394 -> 22,394\n594,439 -> 515,360\n177,11 -> 177,73\n456,628 -> 456,467\n246,214 -> 594,562\n47,790 -> 47,491\n788,21 -> 788,343\n136,847 -> 136,543\n958,302 -> 733,302\n50,981 -> 923,108\n298,179 -> 298,921\n962,644 -> 93,644\n988,671 -> 988,258\n646,140 -> 646,852\n721,264 -> 721,563\n972,407 -> 684,119\n245,422 -> 401,422\n16,494 -> 16,16\n564,72 -> 361,72\n436,390 -> 166,120\n511,571 -> 241,571\n259,215 -> 259,975\n648,841 -> 898,841\n918,881 -> 438,401\n458,561 -> 752,855\n791,192 -> 319,192\n383,929 -> 217,929\n733,26 -> 527,26\n620,160 -> 620,734\n818,181 -> 61,181\n39,21 -> 927,909\n952,208 -> 952,749\n194,55 -> 304,55\n519,673 -> 519,875\n730,919 -> 733,919\n963,269 -> 933,299\n707,112 -> 178,112\n924,349 -> 264,349\n910,94 -> 96,94\n747,289 -> 89,947\n164,956 -> 164,655\n264,300 -> 753,789\n207,672 -> 207,488\n243,838 -> 812,269\n455,320 -> 425,320\n59,964 -> 59,841\n350,373 -> 526,549\n604,683 -> 604,83\n537,281 -> 537,933\n737,634 -> 737,28\n92,909 -> 725,276\n859,335 -> 859,487\n605,495 -> 371,495\n783,155 -> 783,930\n388,591 -> 388,133\n374,634 -> 472,634\n963,914 -> 64,15\n57,435 -> 140,435\n759,619 -> 105,619\n326,501 -> 326,821\n942,136 -> 414,136\n490,376 -> 490,260\n377,59 -> 377,773\n894,169 -> 99,964\n350,511 -> 726,511\n787,728 -> 787,750\n688,11 -> 688,68\n107,514 -> 183,514\n861,12 -> 22,851\n149,49 -> 149,713\n826,737 -> 890,737\n299,307 -> 299,549\n251,648 -> 862,37\n898,85 -> 412,85\n936,168 -> 845,168\n278,677 -> 302,677\n493,878 -> 493,133\n539,205 -> 539,522\n412,495 -> 412,929\n334,605 -> 334,817\n68,462 -> 462,856\n234,134 -> 234,942\n293,823 -> 678,823\n852,874 -> 158,874\n859,612 -> 435,612\n10,876 -> 613,273\n370,13 -> 118,13\n616,774 -> 14,172\n193,543 -> 81,543\n784,179 -> 14,949\n324,533 -> 153,533\n15,976 -> 976,15\n943,52 -> 20,975\n100,34 -> 671,605\n140,552 -> 140,27\n448,497 -> 186,497\n734,355 -> 734,933\n544,131 -> 259,131\n193,84 -> 663,84\n190,949 -> 833,306\n430,34 -> 328,34\n21,46 -> 483,508\n621,202 -> 98,202\n196,874 -> 889,181\n106,217 -> 850,961\n701,891 -> 488,678\n21,597 -> 894,597\n249,21 -> 249,614\n887,808 -> 887,948\n255,711 -> 913,53\n173,447 -> 173,78\n956,224 -> 956,747\n513,882 -> 48,417\n772,591 -> 930,591\n976,98 -> 86,988\n264,67 -> 264,931\n987,982 -> 48,43\n494,514 -> 494,416\n867,785 -> 556,474\n350,902 -> 257,902\n978,977 -> 978,735\n312,240 -> 371,240\n890,112 -> 890,662\n753,327 -> 427,653\n83,888 -> 927,44\n142,480 -> 12,480\n965,39 -> 85,919\n158,926 -> 158,801\n439,22 -> 439,860\n10,26 -> 765,781\n775,838 -> 775,732\n871,607 -> 871,288\n337,850 -> 337,533\n89,581 -> 89,582\n524,977 -> 524,88\n473,283 -> 639,449\n23,324 -> 23,372\n671,486 -> 278,879\n266,98 -> 989,98\n51,947 -> 634,947\n47,18 -> 47,43\n95,239 -> 609,753\n953,34 -> 71,916\n243,685 -> 243,427\n642,537 -> 304,199\n545,41 -> 914,41\n112,860 -> 112,159\n12,12 -> 989,989\n622,907 -> 648,907\n230,983 -> 230,941\n111,868 -> 852,127\n315,895 -> 799,411\n771,533 -> 584,720\n65,492 -> 657,492\n820,315 -> 820,627\n710,554 -> 829,554\n100,967 -> 877,190\n530,733 -> 530,202\n880,28 -> 83,825\n914,448 -> 494,28\n886,344 -> 966,344\n782,923 -> 857,848\n597,632 -> 597,946\n366,789 -> 366,96\n568,834 -> 187,834\n451,687 -> 224,687\n123,12 -> 914,803\n734,42 -> 526,42\n844,116 -> 844,521\n744,976 -> 744,792\n337,837 -> 617,837\n848,139 -> 848,571\n853,264 -> 112,264\n986,965 -> 92,71\n888,892 -> 53,57\n150,342 -> 150,516\n457,264 -> 796,264\n544,595 -> 544,406\n243,118 -> 482,357\n138,804 -> 138,646\n99,80 -> 99,34\n442,883 -> 442,165\n428,72 -> 428,826\n450,815 -> 901,364\n852,516 -> 852,384\n13,969 -> 972,10\n921,50 -> 32,939\n969,470 -> 969,539\n691,238 -> 763,238\n171,733 -> 823,81\n722,963 -> 21,262\n849,203 -> 849,151\n12,99 -> 884,971\n903,240 -> 148,240\n633,140 -> 633,202\n194,393 -> 747,393\n748,43 -> 126,665\n182,155 -> 182,298\n668,814 -> 668,306\n619,384 -> 255,384\n166,341 -> 795,970\n898,870 -> 57,29\n976,148 -> 976,244\n386,525 -> 662,249\n719,67 -> 131,655\n419,847 -> 188,847\n953,823 -> 743,823\n307,299 -> 307,78\n948,253 -> 756,253\n926,938 -> 46,58\n982,618 -> 652,618\n539,742 -> 539,177\n531,974 -> 531,781\n880,922 -> 283,325\n707,257 -> 707,673\n327,308 -> 930,911\n526,170 -> 980,624\n445,653 -> 445,986\n842,737 -> 754,737\n847,982 -> 16,151\n137,426 -> 292,271\n126,556 -> 50,556\n168,766 -> 168,767\n152,46 -> 363,46\n50,381 -> 760,381\n43,943 -> 43,374\n45,964 -> 956,53\n37,403 -> 576,403\n130,317 -> 576,763\n882,840 -> 179,137\n572,608 -> 572,274\n874,977 -> 32,135\n794,56 -> 730,120\n812,841 -> 812,440\n111,66 -> 137,92\n255,287 -> 255,787\n121,137 -> 121,63\n81,811 -> 81,586\n303,365 -> 910,972\n177,134 -> 962,919\n405,41 -> 405,645\n219,934 -> 441,934\n'
test_input = '''0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2'''
puzzle_input = puzzle_input.strip()
test_input = test_input.strip()

class Line:
    def __init__(self, x1: int, y1: int, x2: int, y2: int):
        if x1 != x2 and y1 != y2 and abs(x2-x1) != abs(y2-y1):
            raise RuntimeError
        self.x1, self.y1, self.x2, self.y2 = x1, y1, x2, y2
    def __repr__(self):
        return f"Line{(self.x1, self.y1, self.x2, self.y2)}"
    def __iter__(self):
        either_range = lambda start, stop: range(start, stop+1) if stop > start else range(start, stop-1, -1)
        if self.x1 == self.x2:
            yield from ((self.x1, y) for y in either_range(self.y1, self.y2))
        elif self.y1 == self.y2:
            yield from ((x, self.y1) for x in either_range(self.x1, self.x2))
        elif abs(self.x2-self.x1) == abs(self.y2-self.y1):
            yield from ((x, y) for x, y in zip(either_range(self.x1, self.x2), either_range(self.y1, self.y2)))
        else:
            raise RuntimeError
    @staticmethod
    def coverage(*lines: 'Line'):
        covered = defaultdict(int)
        for line in lines:
            for (x, y) in line:
                covered[(x, y)] += 1
        return dict(covered)
    @staticmethod
    def from_string(string: str) -> 'Line':
        front, back = string.strip().split(" -> ")
        x1, y1 = map(int, front.strip().split(','))
        x2, y2 = map(int, back.strip().split(','))
        return Line(x1, y1, x2, y2)

def print_graph(graph: dict):
    for y in range(10):
        for x in range(10):
            print(graph[(x, y)] if (x, y) in graph else '.', end='')
        print()

def partx(puzzle, diagonal_allowed):
    lines = [Line.from_string(line) for line in puzzle.split('\n')]
    if not diagonal_allowed:
        lines = [line for line in lines if line.x1 == line.x2 or line.y1 == line.y2]
    covered = Line.coverage(*lines)
    amount_at_least_2 = sum(1 for key in covered.values() if key >= 2)
    return amount_at_least_2

def part1(puzzle):
    return partx(puzzle, False)

def part2(puzzle):
    return partx(puzzle, True)

print(part1(puzzle_input))
print(part2(puzzle_input))
