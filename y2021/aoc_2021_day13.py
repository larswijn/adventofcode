from __future__ import annotations

from collections import defaultdict

puzzle_input = '957,648\n617,33\n915,323\n760,515\n82,365\n1206,634\n959,231\n74,324\n552,785\n597,740\n33,226\n765,871\n1195,407\n1036,653\n308,789\n880,337\n550,379\n1084,71\n750,308\n914,227\n922,861\n492,569\n1300,796\n570,301\n366,379\n252,794\n340,424\n1019,550\n443,407\n1298,22\n216,179\n713,740\n492,325\n736,284\n1004,589\n716,189\n293,205\n560,751\n396,59\n1102,415\n398,396\n750,695\n584,765\n1143,849\n398,834\n28,213\n291,446\n587,327\n582,376\n798,393\n126,826\n422,527\n274,345\n877,873\n684,661\n1118,36\n348,449\n1044,45\n654,476\n552,337\n994,462\n1119,532\n1233,675\n378,432\n433,378\n1198,4\n1285,425\n490,261\n870,726\n304,267\n537,147\n808,65\n388,333\n1052,810\n995,745\n599,367\n1041,154\n315,149\n750,59\n246,297\n385,826\n711,527\n599,527\n288,693\n1009,305\n1265,110\n298,661\n961,864\n929,868\n534,26\n952,386\n872,327\n517,648\n104,515\n940,91\n380,793\n792,661\n348,305\n1280,11\n195,525\n1272,649\n912,498\n808,348\n5,513\n994,742\n396,535\n326,866\n741,794\n1041,889\n1310,526\n440,726\n174,742\n217,644\n1048,47\n930,653\n105,154\n1044,849\n1113,126\n1288,739\n586,731\n1146,793\n621,205\n681,694\n1081,350\n1123,693\n1051,226\n263,126\n796,120\n25,3\n194,834\n443,39\n164,585\n316,796\n691,670\n1240,386\n962,53\n175,647\n1059,217\n1233,302\n856,857\n37,861\n13,679\n299,731\n139,439\n112,17\n1084,519\n544,884\n855,504\n323,563\n1026,91\n1135,373\n587,444\n10,348\n512,495\n435,805\n200,261\n63,350\n806,135\n109,84\n999,768\n1081,648\n208,511\n621,375\n1014,890\n726,129\n1159,605\n981,399\n495,107\n30,883\n136,233\n443,463\n1168,393\n22,739\n1233,436\n1111,371\n870,676\n846,661\n186,633\n927,591\n457,484\n52,429\n1047,126\n359,817\n1277,689\n432,149\n638,390\n296,60\n1126,726\n629,872\n897,661\n991,292\n0,28\n545,723\n462,374\n60,33\n1076,46\n1118,520\n708,808\n216,119\n1120,233\n27,208\n1052,269\n966,54\n895,128\n565,492\n115,151\n905,884\n878,149\n749,233\n820,773\n1011,731\n714,403\n765,810\n306,305\n164,793\n373,470\n566,378\n219,441\n1201,644\n304,344\n440,238\n288,379\n1205,154\n656,418\n692,709\n1014,442\n525,264\n867,463\n313,679\n272,213\n1027,296\n1310,409\n946,93\n1006,381\n818,569\n52,9\n55,329\n666,348\n222,821\n795,455\n264,705\n200,353\n1130,726\n975,602\n1303,180\n214,280\n1206,515\n385,887\n340,246\n1052,311\n760,379\n1118,632\n750,751\n1307,115\n723,567\n232,586\n684,856\n1193,147\n20,761\n547,815\n840,600\n975,154\n802,791\n1017,205\n902,73\n618,185\n1042,491\n617,861\n21,30\n1096,4\n410,149\n1,651\n65,320\n591,408\n139,455\n88,516\n626,486\n559,343\n99,262\n35,173\n1019,78\n502,65\n1044,625\n1277,350\n445,299\n765,852\n462,632\n92,491\n480,691\n1228,521\n987,234\n1151,212\n1310,37\n1230,745\n621,71\n634,506\n329,399\n376,229\n525,176\n944,515\n1096,238\n932,432\n535,336\n1148,437\n105,826\n848,262\n1208,885\n602,884\n872,665\n821,63\n246,738\n616,827\n629,694\n216,327\n987,563\n1009,753\n556,157\n671,368\n110,212\n1006,739\n229,648\n102,33\n199,22\n1017,736\n586,362\n535,222\n738,365\n37,481\n935,687\n626,661\n1289,30\n1225,794\n26,793\n325,875\n20,58\n338,462\n77,87\n1280,403\n422,639\n882,572\n723,450\n405,891\n802,103\n199,371\n129,36\n1054,60\n361,689\n470,600\n877,378\n175,521\n468,403\n233,866\n398,498\n311,432\n457,768\n914,611\n232,367\n997,231\n1079,463\n142,847\n960,157\n1208,89\n574,738\n671,526\n498,826\n331,824\n497,837\n830,203\n692,185\n291,190\n577,807\n956,885\n525,597\n331,155\n1195,151\n698,525\n619,672\n75,5\n1151,152\n996,424\n20,847\n432,373\n151,605\n815,742\n291,470\n535,672\n445,147\n1078,586\n1083,397\n251,217\n887,791\n1173,246\n385,5\n288,515\n850,211\n815,152\n550,67\n602,885\n350,102\n159,742\n672,390\n1086,9\n1240,129\n467,693\n710,681\n1071,640\n783,782\n887,463\n515,537\n199,523\n192,858\n380,653\n979,324\n504,135\n233,325\n1235,889\n756,546\n1277,879\n979,570\n15,238\n139,21\n271,666\n30,459\n306,893\n1283,283\n617,481\n708,86\n651,331\n134,486\n497,57\n994,152\n1064,821\n1026,474\n689,544\n1077,325\n77,437\n237,626\n58,155\n970,754\n498,404\n1280,883\n934,665\n741,346\n505,231\n853,768\n867,855\n587,567\n560,835\n1240,627\n716,861\n234,403\n766,212\n676,506\n922,493\n853,544\n924,43\n594,649\n1298,306\n582,518\n1019,246\n268,43\n1200,682\n684,408\n77,436\n788,534\n584,162\n768,502\n70,765\n1287,775\n1017,17\n914,835\n36,261\n373,424\n395,220\n67,108\n1168,847\n1210,375\n716,649\n422,364\n291,704\n266,849\n1079,659\n960,715\n1245,320\n105,243\n815,331\n27,644\n656,476\n1006,715\n388,861\n999,686\n457,320\n77,219\n808,546\n315,311\n922,561\n550,373\n226,322\n1044,109\n316,152\n979,682\n900,116\n1233,359\n1263,263\n586,532\n642,140\n961,416\n1230,149\n385,68\n714,491\n1102,143\n207,560\n731,889\n733,227\n649,889\n256,60\n758,805\n232,82\n1181,544\n683,698\n581,716\n301,753\n970,470\n331,570\n1298,536\n853,320\n733,807\n1078,493\n710,233\n995,65\n194,211\n159,234\n1233,437\n33,544\n584,129\n398,95\n152,315\n1096,686\n35,246\n12,754\n726,732\n1066,745\n1006,157\n208,479\n361,544\n333,381\n569,794\n1010,437\n323,376\n396,583\n577,9\n189,304\n798,708\n323,518\n289,481\n604,386\n657,203\n363,670\n719,408\n863,840\n139,873\n619,344\n186,157\n634,445\n679,663\n723,892\n428,124\n549,826\n914,311\n790,74\n802,455\n1077,625\n835,497\n562,400\n689,877\n403,824\n107,453\n422,586\n284,539\n1110,149\n438,851\n110,436\n930,549\n775,616\n438,327\n1096,656\n587,892\n199,102\n498,516\n1198,886\n672,392\n528,602\n602,465\n922,33\n740,301\n525,108\n244,745\n162,121\n1081,397\n843,693\n1257,420\n1079,431\n425,246\n1267,72\n127,112\n855,550\n100,519\n1171,357\n542,502\n653,691\n495,331\n380,883\n256,765\n85,100\n949,241\n127,480\n880,557\n984,866\n1079,799\n542,56\n413,233\n490,773\n741,233\n388,33\n214,676\n457,544\n93,168\n600,213\n1171,439\n1159,23\n1036,241\n925,378\n904,593\n930,877\n913,278\n955,163\n1014,452\n750,199\n1083,486\n33,653\n43,72\n1110,129\n1002,789\n1073,492\n112,838\n802,887\n995,311\n661,889\n1242,45\n353,246\n1171,455\n284,420\n716,113\n971,297\n129,858\n239,766\n552,271\n440,166\n539,743\n1151,563\n1285,753\n1135,535\n562,681\n751,444\n408,73\n1236,324\n229,246\n229,397\n1004,305\n870,238\n1135,521\n888,527\n1171,775\n683,656\n775,222\n87,128\n522,326\n1111,446\n95,459\n805,231\n1038,728\n1130,231\n7,292\n863,782\n689,879\n249,3\n718,637\n398,715\n326,28\n768,56\n315,135\n1103,560\n889,625\n1071,94\n422,756\n1019,344\n520,74\n313,231\n726,162\n422,255\n470,726\n1243,567\n87,766\n956,437\n195,369\n402,714\n386,515\n1282,681\n398,50\n878,373\n1094,889\n626,233\n186,289\n470,168\n651,772\n396,269\n967,49\n1089,292\n348,589\n627,698\n842,605\n850,584\n542,840\n162,437\n1096,280\n1198,877\n167,45\n33,205\n736,738\n761,68\n1285,3\n30,403\n351,231\n764,857\n63,856\n1047,768\n1006,627\n597,154\n413,661\n569,346\n1277,544\n1170,185\n92,43\n112,504\n897,681\n1061,3\n25,872\n842,403\n681,443\n503,605\n831,23\n329,875\n730,154\n430,557\n464,474\n1243,786\n1168,168\n12,140\n542,54\n258,535\n813,837\n291,0\n1223,128\n1004,841\n842,491\n912,577\n251,592\n1295,656\n139,537\n262,847\n237,402\n1198,17\n1310,28\n64,47\n355,868\n1116,211\n214,208\n806,583\n149,231\n276,880\n199,446\n378,166\n951,817\n927,228\n1113,821\n380,345\n164,757\n200,745\n200,765\n293,877\n268,403\n915,327\n1102,751\n214,686\n1084,572\n755,49\n955,868\n1036,11\n186,737\n1208,861\n649,381\n1088,821\n795,469\n676,58\n1191,616\n710,115\n552,33\n684,38\n562,491\n1054,520\n525,630\n870,218\n237,268\n353,694\n1041,5\n1170,774\n570,593\n831,871\n187,693\n982,857\n497,889\n885,246\n755,632\n246,821\n666,546\n67,450\n1110,261\n987,518\n1078,703\n545,852\n293,736\n234,494\n1115,369\n1274,261\n402,626\n1247,150\n1230,828\n508,439\n405,884\n1274,633\n626,408\n306,1\n1233,458\n415,766\n520,820\n152,65\n1026,420\n1017,158\n239,254\n268,491\n1110,745\n159,107\n761,826\n413,681\n820,325\n438,5\n1171,119\n1051,327\n618,751\n579,217\n1151,331\n1012,661\n77,359\n1102,511\n1130,616\n1228,529\n350,715\n\nfold along x=655\nfold along y=447\nfold along x=327\nfold along y=223\nfold along x=163\nfold along y=111\nfold along x=81\nfold along y=55\nfold along x=40\nfold along y=27\nfold along y=13\nfold along y=6\n'.strip()
test_input = '''6,10
0,14
9,10
0,3
10,4
4,11
6,0
6,12
4,1
0,13
10,12
3,4
3,0
8,4
1,10
2,14
8,10
9,0

fold along y=7
fold along x=5'''.strip()


class Paper:
    def __init__(self, width: int, height: int, points: list[tuple(int, int)]):
        self.width, self.height = width, height
        self.points: dict[(int, int), int] = defaultdict(int, {p: 1 for p in points})
    
    def __repr__(self):
        return f"Paper({self.width}, {self.height}, {self.points})"
    
    def __getitem__(self, key) -> int:
        return self.points[key]

    def __setitem__(self, key, value):
        self.points[key] = value
    
    def __iter__(self):
        for y in range(self.height+1):
            for x in range(self.width+1):
                yield (y, x), self[y, x]

    def unique_dot_count(self) -> int:
        return sum(1 for _, value in self if value)
    
    def fold_along(self, string: str) -> Paper:
        copy = self.copy()
        for line in string.split('\n'):
            line = line.split()[-1]
            axis, along = line.split('=')
            copy = copy.fold(axis, int(along))
        return copy

    def fold(self, axis: str, along: int) -> Paper:
        assert axis in {'x', 'y'}
        copy = self.copy()
        for (y, x), value in self:
            if (y if axis == 'y' else x) <= along or not value:
                continue
            if axis == 'y':
                copy[abs(y-along*2), x] += value
            else:
                copy[y, abs(x-along*2)] += value
            copy[y, x] = 0
        if axis == 'y':
            copy.height = along-1
        else:
            copy.width = along-1
        return copy

    def visual(self):
        for (y ,x), value in self:
            print('#' if value else ' ', end='\n' if x==self.width else '')

    def copy(self):
        return Paper(self.width, self.height, [(y, x) for (y, x), value in self if value])
    
    @staticmethod
    def from_string(string: str) -> Map:
        string = string.split("\n\n")[0]
        values = [tuple(map(int, line.split(',')))[::-1] for line in string.split('\n')]
        width = max(values, key=lambda x: x[1])[1]
        height = max(values, key=lambda y: y[0])[0]
        return Paper(width, height, values)


def part1(puzzle):
    paper = Paper.from_string(puzzle)
    first_fold = puzzle.split("\n\n")[1].split('\n')[0]
    return paper.fold_along(first_fold).unique_dot_count()

def part2(puzzle):
    paper_str, folds = puzzle.split("\n\n")
    paper = Paper.from_string(paper_str)
    return paper.fold_along(folds).visual()

print(part1(puzzle_input), end="\n\n")
part2(puzzle_input)
