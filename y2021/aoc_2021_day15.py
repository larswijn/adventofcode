from __future__ import annotations

from collections import defaultdict

puzzle_input = '3389468957195191621612774424781291213569193831469897426487912119997336538328929529524567932999764397\n9696723499379962193291388224211989319681442926919991941367126322911153337169884311818994691998142818\n7814276813122519516197651882922789689697678423766816984171349893557699216293531566171577752862999189\n8695248971983831118888345832382379869828991721417166494233961814479616298512617993916199484169768863\n9438388913239281978754611917891972779819131371394848464949495975929194988978263297929499659581689931\n1969369226881869218169885835118239749691599946731678781981449349938381248989441932791317925352759942\n7123779172193954721688869139758196888794211367981479259955577415226913521927979417918717189391166677\n7943535198721159911645992488162197692426999278117467587266221897325185828271274831492759999389981518\n7887619766952832911156929833966381186297622871182811544331199411149635721326489819882214998153596213\n4648859361999318828881375191941748791136972816261717334561674919882252411527611484116833231296411618\n2212833947623292922961462362496994195995499987579663947111959949488113399114998685977193848697511116\n3969643397751161263327478692813671171847775693111943664189164399861484521889181142821292229863551167\n8151199761993969924113338516875823735898546129898975198189479571912373955912635949179871968717523778\n1414763299794192255175491986733883171469919251932778658489558798293791213523573113651247139189979782\n2914799981456921799818211127852862317673886288925766299289279774929166126931375969181699919238741667\n2698477149739411976291599914938267421975388151967614241699299899988245295611437935247966657591969778\n5111685483932883334989653569619111635366491297319621661611923917367917419122271997221566146467196419\n1788715511737849818313857123597911255911246797868723244979271345629978187199964189721899894769193943\n7799127514813556529152157494481412175528363357891151919575984268994117588197854536971298218293132975\n5191589471484411568918992274115248889993179919351221221161883968825191864548331595791166197198127399\n7134111721142222921564942388988611329462613295296451198969241921221266311131154727752149669939921451\n9231215817921161996961419339655958616296399432964859979861791388899829432588951126486912217259167832\n7288383496924661955553368918859194248378665392455721328875918986215811121839385268238274922337419599\n5398269731871319317925166181127791822121922995312494296518745191129851711261599329258446769978513371\n7519911347619499998183144921992923383195118218717115338898919755349399522578587858498623729969364439\n7799129986113515119414994929919839999292571679437875189815112227229198341931879969713161977291229411\n7935126516249816371388747122241374929559962158944822262859887411378978918828979468577636757199381622\n9619932788677832767569586827293945491235991219829538299775962554614497461119146288916992936563148974\n9274593916115941959559369931419911191379991777178297819173418914511525194974235391698919979979326488\n4197882683459929888814912339873331135564287344534278415271819298251894178819155117432111915162524437\n5433115493211699435793985889978218741372736831392184941927199689192129119118358892894452459744481878\n1657317855321186979916212557229189126829384985198684586779197782862729537145651985526969534395252897\n2116541971938549922767831913227758894366215369534934499842711566152199691337438913318633821118197342\n1983831969661227223991853684189749239981961379472232986914971478185157749262379825981151116111391621\n4151918985339445215718286389479225192892875919181211445498736766932899588886875199965186938911692151\n9589959948482774911319126412426417169841631999115519761879839629477452625111738644112591572966125182\n5966781638868275174869483219311675196979665689337619115451698221599569139959921748975692418154161215\n9139294185336919134967481513876592918798682562619962843826889317923849891328947261161198818175918218\n8953314967869319325225222819348241292514342588988219916851746196188279568772199878152119741943687547\n3623975797337114736793127911219891616989941371351811389988939226193113299227559114939998824933596189\n4792198337789991513998111115624229327919716399125683154671864613488996913763986297989392214918799549\n9582156162119767191968293111982148921117852365798973396484976367431679823788317266841239191591867913\n1832427961318389595862199619377811881597987152846538794932933914386173429144926381195992913531469974\n9691161819686318892917368671921731596121389837296929711715188131389941519996979627999199591991447237\n9215185378797971821395199789981278927982378673997259983291882657292328181898316839993294691643299918\n5923989193525399996283385481919987227168623211393319139671359456396994159292245311434669927135312996\n1884625283194198884964982369891828185782113217292219114831166257469135571961533825926199954629417349\n6111949696979799811373595191234733819562148384923973895979211192836681941894691812541844218336511339\n1249191116838794499929495172321833926959698393418491245194131441699723727197797164925165634819657988\n2759999328431922998429144768748826516915128299397318379136812516257417734757929719859994463953714737\n8412564991848221147123362451415229129914455129828797121813332839683412625979532529977754174985173312\n9742465485298332327612945182849383772991183957251966333793827252746988179943996447941239888251319238\n3671711995796174979139941113938431582899299195925181152951151397591597629215954959631917337368878879\n8572911294992269273413272895293193181435721329699969666966951818961271149911584782639851838411128653\n8639931138942796916933259811589581615765937985989129659479818479119983893281668137497597192317551992\n6929874911682426233195283262476189294111737918136624982649316917143913141994718522713155795784823193\n2145599768916692449167618961187975991119259336856741211277385399699249992884451697138386924211373474\n1873372796987436943131312835256225161714919262191652723119832296197636121922849295821535283538916762\n2265491922334921624297523951291195949212943689816426171136931252288434457431397165991971931349772995\n7948989914979949319739929811162848197242594572224894223185178399413154839347668173522499315412849841\n6512298397749956981193929432127349154191232992723791712799399549897128999753472377332829713939844361\n8318256681893818447127522891199585141899915919979948991198619491619713884191379396176914496755588291\n9719173813321238564133749261368914593111277529319912988479688926274151821671943875362235784319616865\n7311898511997891581895653229799294836812924356416919365514454829976974192691985278349914191448329111\n8817168994132999198368881732584351379817759819491141482294889256135317795783961892249539482715816792\n5896213329918833292293911783651125119972217853144928455791518991884939185238272581218289359229314319\n3617297154332885617165178984393881998243916999482731981356353638517787187224712118912138456814919133\n3535392788469846427491259255498814338119727966121371696135591892721238769329394666922458135939662918\n8978713293695632285874319439519191528111993197233921631728174431879983883769192996395656124959349113\n3992992899774912938872961918235813659794322493593751297111889487248153992595796911879156514968951999\n1471382318485251196198453195432318184626959713594972656999554854114159575689998859276493989363544466\n1914898952712968817183517192313388723953142976199329737616825511227233527517211968929219797929437618\n1272193394839879255172979571591474229318787739666234782976964698287147711148116199239659167242671661\n3654331179111349792874431999652732599285596829861644244916181997299656916269261632958231258617213317\n5271993216416317872662593141986931579961338264743488457429991961919194199494921524355223119718991439\n8891127916699131371791479939236581692148538871244496989159269311413633195198718812918128848518994988\n9813245138697623492999496366863719931948111957276344647113779158171811823828433971481294592115619244\n7516259831363511251771637699119734921996998577511252532589636172425851888377191246923711967978189775\n6111913728638886247111116979292975943492991527751161823641178386991291519931894872596111234978997189\n6717611188354611555241979133156559369829996819272871115282379926296281342657121174182835474195629231\n9878715996669514192488194781194942751813814811131235169867122578931899198195111198493947432296924683\n6438791983961828369724259934167221814427296949178238944938113283325719271944992987711875824461298118\n5195451989571871525468815787519187119118618952998991277251131269781141749196471955457995478697886443\n2959822826382133121882563591589713899811521478342383738916889783729421618338343491998126218314915171\n2631923589942121913799763789216419692361914546181659457617782336821942122188811851383138241753649489\n9992289429129341984433974315622294639852937888122388158231848984421542369311819216942259519936215481\n3349464198938889131791931113242889116216542154192949399985916979215922819649429733791931278834994712\n2711163996265866311352189994619383246984822916993759144813151815299488934194181213986395739964258137\n2174745854781389832416122151952317564328122421644357343168175979482567885291413293993996938675362939\n7579317491998958176743892229898112525411948981982915814899523891116829898692464736273842737917296699\n3943981243848348897569424647878277184921348331489927195159961856893716141223583261711275595691219931\n3894196153581992667198693188995168422145894399925925177632929527319482971447681924549328174989362194\n1938318592297692293779317816386969248919752566557915139919614121911113231921769686888496487914655978\n6895761659942389992173411367761419996886179248923636115218383311645919491759834821511123413585319447\n1714992394989415348976956296915691959991463176292895154115458928981111111658281985886256787111317281\n6111427283128793746188988196974159169972211989199319534919763791982577916819976818935222459811561994\n9112369767928176941992947719126492789972131111267191921699379681595192912698118983672353699932949194\n3691316978229429439969257627496969959919188996129916822468586994891228183171556583538735756981191184\n1889273619911397689813219925751671129554482532979374999962138151188171289238825995754135581779326797\n2865692499363943591911977961231313686973849878387599963859497937346925669637729745891898997393123146'.strip()
test_input = '1163751742\n1381373672\n2136511328\n3694931569\n7463417111\n1319128137\n1359912421\n3125421639\n1293138521\n2311944581'.strip()


class Map:
    def __init__(self, width: int, height: int, values: list[int], *, part: int = 1):
        self.width = self.width_tile = int(width)
        self.height = self.height_tile = int(height)
        self.values = list(values)
        self.cached_values = {}
        assert 1 <= part <= 2, part
        self.part = int(part)
        if part == 2:
            self.width, self.height = self.width*5, self.height*5
        
    def __repr__(self):
        return f"Map({self.width}, {self.height}, {self.values}, part={self.part})"

    def __getitem__(self, key):
        assert isinstance(key, tuple) and len(key) == 2 and key[0] >= 0 <= key[1], key
        # we don't allow negative indices (buggy & difficult)
        if self.part == 1:
            return self.values[key[0]*self.width+key[1]]
        elif self.part == 2:
            if key in self.cached_values:
                return self.cached_values[key]
            # dynamically calculate what the value at (y, x) would be, then cache it
            incr, y = divmod(key[0], self.height_tile)
            incr2, x = divmod(key[1], self.width_tile)
            assert incr <= 4 and incr2 <= 4, (incr, incr2)
            value = self.values[y*self.width_tile+x] + incr + incr2
            value = value % 9 if value > 9 else value
            self.cached_values[key] = value
            return value

    def __iter__(self):
        for y in range(self.height):
            for x in range(self.width):
                yield (y, x), self[y, x]

    def get_neighbours(self, pos: (int, int), diagonal=False) -> list[((int, int), int)]:
        (y, x), neighbours = pos, []
        if diagonal:
            deltas = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]
        else:
            deltas = [(-1, 0), (0, -1), (0, 1), (1, 0)]
        for delta_y, delta_x in deltas:
            new_y, new_x = y+delta_y, x+delta_x
            if 0 <= (new_y) < self.height and 0 <= (new_x) < self.width:
                neighbours.append(((new_y, new_x), self[new_y, new_x]))
        return neighbours

    def __navigate1(self, start: tuple, end: tuple, cur_cost: int, seen: set[tuple], max_cost: int | float) -> (int, list):
        best_cost, best_path = max_cost, []
        neighbours = self.get_neighbours(start, diagonal=False)
        neighbours = sorted(neighbours, key=lambda x: x[-1])
        for neighbour, neighbour_cost in neighbours:
            if neighbour in seen or (cur_cost + neighbour_cost) >= best_cost:
                continue
            if neighbour == end:
                return self[start] + neighbour_cost, [start, neighbour]
            seen.add(neighbour)
            result_cost, result_path = self.__navigate1(neighbour, end,
                                                        cur_cost + neighbour_cost,
                                                        seen.copy(), best_cost)
            if self[start] + result_cost < best_cost:
                best_cost, best_path = self[start] + result_cost, [start] + result_path
                # print(f"{start = }, {best_cost = }, {len(best_path) = }")
        return best_cost, best_path

    def _navigate1(self, start: tuple, end: tuple):
        # depth-first search with continuously updating base-line
        bad_path = sum(self[y, 0] for y in range(self.height-1)) + sum(self[0, x] for x in range(self.width))
        return self.__navigate1(start, end, 0, {start}, bad_path)[0] - self[start]

    def _navigate2(self, start: tuple, end: tuple):
        # dijkstra
        unvisited = {pos for pos, _ in self}
        tent_dist = defaultdict(lambda: float("inf"), {start: 0})
        while True:
            current_node = min(tent_dist.keys() & unvisited, key=tent_dist.get)
            if current_node == end:
                return tent_dist[end]
            unvisited.remove(current_node)
            for neighbour, cost in self.get_neighbours(current_node, diagonal=False):
                tent_dist[neighbour] = min(tent_dist[neighbour], tent_dist[current_node] + cost)

    def _navigate3(self, start: tuple, end: tuple):
        # A*
        frontier = {start}
        heuristic = lambda n: abs(n[0] - end[0]) + abs(n[1] - end[1])
        tent_dist = defaultdict(lambda: float("inf"), {start: 0})
        heur_dist = defaultdict(lambda: float("inf"), {start: heuristic(start)})
        while frontier:
            current_node = min(frontier, key=heur_dist.get)
            # print(frontier, current_node)
            if current_node == end:
                return tent_dist[current_node]
            frontier.remove(current_node)
            for neighbour, neighbour_cost in self.get_neighbours(current_node, diagonal=False):
                neighbour_total_cost = tent_dist[current_node] + neighbour_cost
                if neighbour_total_cost < tent_dist[neighbour]:
                    tent_dist[neighbour] = neighbour_total_cost
                    heur_dist[neighbour] = neighbour_total_cost + heuristic(neighbour)
                    frontier.add(neighbour)

    def navigate(self, method: int = 3):
        start, end = (0, 0), (self.height-1, self.width-1)
        navigation_method = {1: self._navigate1, 2: self._navigate2, 3: self._navigate3}[method]
        cost = navigation_method(start, end)
        return cost
    
    @staticmethod
    def from_string(string, part: int = 1) -> Map:
        width, height = len(string.split('\n')), len(string.split('\n')[0])
        assert width == height, (width, height)
        values = list(map(int, string.replace('\n', '')))
        return Map(width, height, values, part=part)


def part1(puzzle) -> int:
    graph = Map.from_string(puzzle, part=1)
    return graph.navigate()

def part2(puzzle) -> int:
    graph = Map.from_string(puzzle, part=2)
    return graph.navigate()

def main():
    print(part1(puzzle_input))
    print(part2(puzzle_input))

if __name__ == "__main__":
    main()
